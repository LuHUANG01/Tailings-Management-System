//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("4.9.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("12/03/2015 17:25:58")]

namespace AxMapWinGIS {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{54f4c2f7-ed40-43b7-9d6f-e45965df7f95}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("MouseDownEvent")]
    public class AxMap : System.Windows.Forms.AxHost {
        
        private MapWinGIS._DMap ocx;
        
        private AxMapEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxMap() : 
                base("54f4c2f7-ed40-43b7-9d6f-e45965df7f95") {
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color CtlbackColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlbackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.backColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlbackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.backColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual double ZoomPercent {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomPercent", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ZoomPercent;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomPercent", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ZoomPercent = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual MapWinGIS.tkCursorMode CursorMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CursorMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CursorMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CursorMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CursorMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual MapWinGIS.tkCursor MapCursor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MapCursor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MapCursor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool SendMouseDown {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendMouseDown;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendMouseDown = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual bool SendMouseUp {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseUp", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendMouseUp;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseUp", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendMouseUp = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool SendMouseMove {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseMove", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendMouseMove;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseMove", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendMouseMove = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual bool SendSelectBoxDrag {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendSelectBoxDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendSelectBoxDrag;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendSelectBoxDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendSelectBoxDrag = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool SendSelectBoxFinal {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendSelectBoxFinal", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendSelectBoxFinal;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendSelectBoxFinal", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendSelectBoxFinal = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual double ExtentPad {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtentPad", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ExtentPad;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtentPad", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ExtentPad = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual int ExtentHistory {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtentHistory", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ExtentHistory;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtentHistory", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ExtentHistory = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual string Key {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Key", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Key;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Key", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Key = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual int NumLayers {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NumLayers", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.NumLayers;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual int LastErrorCode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LastErrorCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LastErrorCode;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual MapWinGIS.tkLockMode IsLocked {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsLocked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsLocked;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsLocked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IsLocked = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(118)]
        public virtual bool SendOnDrawBackBuffer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendOnDrawBackBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendOnDrawBackBuffer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendOnDrawBackBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendOnDrawBackBuffer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(151)]
        public virtual bool UseSeamlessPan {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UseSeamlessPan", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UseSeamlessPan;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UseSeamlessPan", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.UseSeamlessPan = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(152)]
        public virtual double MouseWheelSpeed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseWheelSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MouseWheelSpeed;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseWheelSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseWheelSpeed = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(158)]
        public virtual MapWinGIS.tkUnitsOfMeasure MapUnits {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapUnits", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MapUnits;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapUnits", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MapUnits = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(166)]
        public virtual string VersionNumber {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VersionNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VersionNumber;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(172)]
        public virtual bool ShowRedrawTime {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowRedrawTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowRedrawTime;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowRedrawTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowRedrawTime = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(173)]
        public virtual bool ShowVersionNumber {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowVersionNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowVersionNumber;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowVersionNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowVersionNumber = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(192)]
        public virtual MapWinGIS.GeoProjection GeoProjection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GeoProjection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GeoProjection;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GeoProjection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GeoProjection = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(195)]
        public virtual bool ScalebarVisible {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScalebarVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ScalebarVisible;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScalebarVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ScalebarVisible = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(205)]
        public virtual MapWinGIS.tkScalebarUnits ScalebarUnits {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScalebarUnits", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ScalebarUnits;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScalebarUnits", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ScalebarUnits = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(187)]
        public virtual MapWinGIS.Extents MaxExtents {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MaxExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MaxExtents;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(191)]
        public virtual MapWinGIS.Tiles Tiles {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Tiles", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Tiles;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(211)]
        public virtual MapWinGIS.FileManager FileManager {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FileManager", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FileManager;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(241)]
        public virtual MapWinGIS.UndoList UndoList {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UndoList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UndoList;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(243)]
        public virtual MapWinGIS.Identifier Identifier {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Identifier", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Identifier;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(235)]
        public virtual MapWinGIS.ShapeEditor ShapeEditor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShapeEditor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShapeEditor;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(196)]
        public virtual MapWinGIS.Measuring Measuring {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Measuring", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Measuring;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(250)]
        public virtual MapWinGIS.SelectionList IdentifiedShapes {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IdentifiedShapes", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IdentifiedShapes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(251)]
        public virtual MapWinGIS.DrawingRectangle FocusRectangle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FocusRectangle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FocusRectangle;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(252)]
        public virtual MapWinGIS.tkCustomDrawingFlags CustomDrawingFlags {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CustomDrawingFlags", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CustomDrawingFlags;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CustomDrawingFlags", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CustomDrawingFlags = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(254)]
        public virtual MapWinGIS.tkAngleFormat ShowCoordinatesFormat {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowCoordinatesFormat", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowCoordinatesFormat;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowCoordinatesFormat", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowCoordinatesFormat = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(256)]
        public virtual int ExtentHistoryUndoCount {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtentHistoryUndoCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ExtentHistoryUndoCount;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(257)]
        public virtual int ExtentHistoryRedoCount {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtentHistoryRedoCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ExtentHistoryRedoCount;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual object GlobalCallback {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GlobalCallback", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GlobalCallback;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GlobalCallback", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GlobalCallback = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual object Extents {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Extents", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Extents;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Extents", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Extents = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(217)]
        public virtual MapWinGIS.tkMapProjection Projection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Projection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Projection;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Projection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Projection = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(188)]
        public virtual double PixelsPerDegree {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PixelsPerDegree", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PixelsPerDegree;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(193)]
        public virtual MapWinGIS.Extents GeographicExtents {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GeographicExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GeographicExtents;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(214)]
        public virtual int CurrentZoom {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CurrentZoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CurrentZoom;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CurrentZoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CurrentZoom = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(156)]
        public virtual double CurrentScale {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CurrentScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CurrentScale;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CurrentScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CurrentScale = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(212)]
        public virtual float Latitude {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Latitude", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Latitude;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Latitude", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Latitude = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(213)]
        public virtual float Longitude {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Longitude", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Longitude;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Longitude", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Longitude = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(218)]
        public virtual MapWinGIS.tkKnownExtents KnownExtents {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("KnownExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.KnownExtents;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("KnownExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.KnownExtents = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(108)]
        public virtual MapWinGIS.tkResizeBehavior MapResizeBehavior {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapResizeBehavior", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MapResizeBehavior;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapResizeBehavior", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MapResizeBehavior = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(148)]
        public virtual bool TrapRMouseDown {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TrapRMouseDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TrapRMouseDown;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TrapRMouseDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TrapRMouseDown = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(149)]
        public virtual bool DisableWaitCursor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DisableWaitCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DisableWaitCursor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DisableWaitCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DisableWaitCursor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(219)]
        public virtual MapWinGIS.tkCoordinatesDisplay ShowCoordinates {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowCoordinates", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowCoordinates;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowCoordinates", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowCoordinates = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(221)]
        public virtual bool GrabProjectionFromData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GrabProjectionFromData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GrabProjectionFromData;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GrabProjectionFromData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GrabProjectionFromData = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(228)]
        public virtual MapWinGIS.tkCustomState InertiaOnPanning {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("InertiaOnPanning", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.InertiaOnPanning;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("InertiaOnPanning", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.InertiaOnPanning = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(229)]
        public virtual bool ReuseTileBuffer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReuseTileBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ReuseTileBuffer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReuseTileBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ReuseTileBuffer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(230)]
        public virtual MapWinGIS.tkZoomBarVerbosity ZoomBarVerbosity {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomBarVerbosity", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ZoomBarVerbosity;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomBarVerbosity", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ZoomBarVerbosity = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(233)]
        public virtual int ZoomBarMinZoom {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomBarMinZoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ZoomBarMinZoom;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomBarMinZoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ZoomBarMinZoom = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(234)]
        public virtual int ZoomBarMaxZoom {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomBarMaxZoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ZoomBarMaxZoom;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomBarMaxZoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ZoomBarMaxZoom = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(207)]
        public virtual MapWinGIS.tkZoomBehavior ZoomBehavior {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomBehavior", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ZoomBehavior;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomBehavior", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ZoomBehavior = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(226)]
        public virtual bool ShowZoomBar {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowZoomBar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowZoomBar;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowZoomBar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowZoomBar = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(227)]
        public virtual MapWinGIS.tkCustomState AnimationOnZooming {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AnimationOnZooming", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AnimationOnZooming;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AnimationOnZooming", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AnimationOnZooming = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(231)]
        public virtual MapWinGIS.tkZoomBoxStyle ZoomBoxStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomBoxStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ZoomBoxStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomBoxStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ZoomBoxStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual int UDCursorHandle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UDCursorHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UDCursorHandle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UDCursorHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.UDCursorHandle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(216)]
        public virtual MapWinGIS.tkTileProvider TileProvider {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TileProvider", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TileProvider;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TileProvider", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TileProvider = value;
            }
        }
        
        public event System.EventHandler DblClick;
        
        public event _DMapEvents_MouseDownEventHandler MouseDownEvent;
        
        public event _DMapEvents_MouseUpEventHandler MouseUpEvent;
        
        public event _DMapEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event _DMapEvents_FileDroppedEventHandler FileDropped;
        
        public event _DMapEvents_SelectBoxFinalEventHandler SelectBoxFinal;
        
        public event _DMapEvents_SelectBoxDragEventHandler SelectBoxDrag;
        
        public event System.EventHandler ExtentsChanged;
        
        public event _DMapEvents_MapStateEventHandler MapState;
        
        public event _DMapEvents_OnDrawBackBufferEventHandler OnDrawBackBuffer;
        
        public event _DMapEvents_ShapeHighlightedEventHandler ShapeHighlighted;
        
        public event _DMapEvents_BeforeDrawingEventHandler BeforeDrawing;
        
        public event _DMapEvents_AfterDrawingEventHandler AfterDrawing;
        
        public event _DMapEvents_TilesLoadedEventHandler TilesLoaded;
        
        public event _DMapEvents_MeasuringChangedEventHandler MeasuringChanged;
        
        public event _DMapEvents_BeforeShapeEditEventHandler BeforeShapeEdit;
        
        public event _DMapEvents_ValidateShapeEventHandler ValidateShape;
        
        public event _DMapEvents_AfterShapeEditEventHandler AfterShapeEdit;
        
        public event _DMapEvents_ChooseLayerEventHandler ChooseLayer;
        
        public event _DMapEvents_ShapeValidationFailedEventHandler ShapeValidationFailed;
        
        public event _DMapEvents_BeforeDeleteShapeEventHandler BeforeDeleteShape;
        
        public event System.EventHandler ProjectionChanged;
        
        public event System.EventHandler UndoListChanged;
        
        public event _DMapEvents_SelectionChangedEventHandler SelectionChanged;
        
        public event _DMapEvents_ShapeIdentifiedEventHandler ShapeIdentified;
        
        public event _DMapEvents_LayerProjectionIsEmptyEventHandler LayerProjectionIsEmpty;
        
        public event _DMapEvents_ProjectionMismatchEventHandler ProjectionMismatch;
        
        public event _DMapEvents_LayerReprojectedEventHandler LayerReprojected;
        
        public event _DMapEvents_LayerAddedEventHandler LayerAdded;
        
        public event _DMapEvents_LayerRemovedEventHandler LayerRemoved;
        
        public event _DMapEvents_BackgroundLoadingStartedEventHandler BackgroundLoadingStarted;
        
        public event _DMapEvents_BackgroundLoadingFinishedEventHandler BackgroundLoadingFinished;
        
        public event _DMapEvents_GridOpenedEventHandler GridOpened;
        
        public event _DMapEvents_ShapesIdentifiedEventHandler ShapesIdentified;
        
        public event _DMapEvents_OnDrawBackBuffer2EventHandler OnDrawBackBuffer2;
        
        public virtual string get_ErrorMsg(int errorCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ErrorMsg", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ErrorMsg(errorCode)));
            return returnValue;
        }
        
        public virtual int HWnd() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.HWnd()));
            return returnValue;
        }
        
        public virtual bool FindSnapPoint(double tolerance, double xScreen, double yScreen, ref double xFound, ref double yFound) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FindSnapPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.FindSnapPoint(tolerance, xScreen, yScreen, ref xFound, ref yFound)));
            return returnValue;
        }
        
        public virtual void Undo() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Undo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Undo();
        }
        
        public virtual string get_DrawingKey(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_DrawingKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_DrawingKey(drawHandle)));
            return returnValue;
        }
        
        public virtual void set_DrawingKey(int drawHandle, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_DrawingKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_DrawingKey(drawHandle, param0);
        }
        
        public virtual int DrawLabel(string text, double x, double y, double rotation) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawLabel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.DrawLabel(text, x, y, rotation)));
            return returnValue;
        }
        
        public virtual int DrawLabelEx(int drawHandle, string text, double x, double y, double rotation) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawLabelEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.DrawLabelEx(drawHandle, text, x, y, rotation)));
            return returnValue;
        }
        
        public virtual void ClearDrawingLabels(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearDrawingLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearDrawingLabels(drawHandle);
        }
        
        public virtual void set_DrawingLabelsVisible(int drawHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_DrawingLabelsVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_DrawingLabelsVisible(drawHandle, param0);
        }
        
        public virtual System.Drawing.Color get_ShapeLayerFillColor(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerFillColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapeLayerFillColor(layerHandle)));
            return GetColorFromOleColor(returnValue);
        }
        
        public virtual void set_ShapeLayerFillColor(int layerHandle, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerFillColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerFillColor(layerHandle, param0);
        }
        
        public virtual System.Drawing.Color get_ShapeLayerLineColor(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerLineColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapeLayerLineColor(layerHandle)));
            return GetColorFromOleColor(returnValue);
        }
        
        public virtual void set_ShapeLayerLineColor(int layerHandle, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerLineColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerLineColor(layerHandle, param0);
        }
        
        public virtual System.Drawing.Color get_ShapeLayerPointColor(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerPointColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapeLayerPointColor(layerHandle)));
            return GetColorFromOleColor(returnValue);
        }
        
        public virtual void set_ShapeLayerPointColor(int layerHandle, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerPointColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerPointColor(layerHandle, param0);
        }
        
        public virtual bool get_ShapeLayerDrawFill(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerDrawFill", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeLayerDrawFill(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_ShapeLayerDrawFill(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerDrawFill", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerDrawFill(layerHandle, param0);
        }
        
        public virtual bool get_ShapeLayerDrawLine(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerDrawLine", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeLayerDrawLine(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_ShapeLayerDrawLine(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerDrawLine", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerDrawLine(layerHandle, param0);
        }
        
        public virtual bool get_ShapeLayerDrawPoint(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerDrawPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeLayerDrawPoint(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_ShapeLayerDrawPoint(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerDrawPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerDrawPoint(layerHandle, param0);
        }
        
        public virtual float get_ShapeLayerLineWidth(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerLineWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            float returnValue = ((float)(this.ocx.get_ShapeLayerLineWidth(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_ShapeLayerLineWidth(int layerHandle, float param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerLineWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerLineWidth(layerHandle, param0);
        }
        
        public virtual float get_ShapeLayerPointSize(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerPointSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            float returnValue = ((float)(this.ocx.get_ShapeLayerPointSize(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_ShapeLayerPointSize(int layerHandle, float param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerPointSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerPointSize(layerHandle, param0);
        }
        
        public virtual float get_ShapeLayerFillTransparency(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerFillTransparency", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            float returnValue = ((float)(this.ocx.get_ShapeLayerFillTransparency(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_ShapeLayerFillTransparency(int layerHandle, float param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerFillTransparency", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerFillTransparency(layerHandle, param0);
        }
        
        public virtual MapWinGIS.tkLineStipple get_ShapeLayerLineStipple(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerLineStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.tkLineStipple returnValue = ((MapWinGIS.tkLineStipple)(this.ocx.get_ShapeLayerLineStipple(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_ShapeLayerLineStipple(int layerHandle, MapWinGIS.tkLineStipple param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerLineStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerLineStipple(layerHandle, param0);
        }
        
        public virtual MapWinGIS.tkFillStipple get_ShapeLayerFillStipple(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerFillStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.tkFillStipple returnValue = ((MapWinGIS.tkFillStipple)(this.ocx.get_ShapeLayerFillStipple(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_ShapeLayerFillStipple(int layerHandle, MapWinGIS.tkFillStipple param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerFillStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerFillStipple(layerHandle, param0);
        }
        
        public virtual MapWinGIS.tkPointType get_ShapeLayerPointType(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerPointType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.tkPointType returnValue = ((MapWinGIS.tkPointType)(this.ocx.get_ShapeLayerPointType(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_ShapeLayerPointType(int layerHandle, MapWinGIS.tkPointType param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerPointType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerPointType(layerHandle, param0);
        }
        
        public virtual System.Drawing.Color get_ShapeLayerStippleColor(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerStippleColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapeLayerStippleColor(layerHandle)));
            return GetColorFromOleColor(returnValue);
        }
        
        public virtual void set_ShapeLayerStippleColor(int layerHandle, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerStippleColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerStippleColor(layerHandle, param0);
        }
        
        public virtual bool get_ShapeLayerStippleTransparent(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerStippleTransparent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeLayerStippleTransparent(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_ShapeLayerStippleTransparent(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerStippleTransparent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerStippleTransparent(layerHandle, param0);
        }
        
        public virtual MapWinGIS.Image SnapShot(object boundBox) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SnapShot", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Image returnValue = ((MapWinGIS.Image)(this.ocx.SnapShot(boundBox)));
            return returnValue;
        }
        
        public virtual MapWinGIS.Image SnapShot2(int clippingLayerNbr, double zoom, int pWidth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SnapShot2", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Image returnValue = ((MapWinGIS.Image)(this.ocx.SnapShot2(clippingLayerNbr, zoom, pWidth)));
            return returnValue;
        }
        
        public virtual MapWinGIS.Image SnapShot3(double left, double right, double top, double bottom, int width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SnapShot3", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Image returnValue = ((MapWinGIS.Image)(this.ocx.SnapShot3(left, right, top, bottom, width)));
            return returnValue;
        }
        
        public virtual bool SnapShotToDC(System.IntPtr hDC, MapWinGIS.Extents extents, int width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SnapShotToDC", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SnapShotToDC(hDC, extents, width)));
            return returnValue;
        }
        
        public virtual bool SnapShotToDC2(System.IntPtr hDC, MapWinGIS.Extents extents, int width, float offsetX, float offsetY, float clipX, float clipY, float clipWidth, float clipHeight) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SnapShotToDC2", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SnapShotToDC2(hDC, extents, width, offsetX, offsetY, clipX, clipY, clipWidth, clipHeight)));
            return returnValue;
        }
        
        public virtual void DrawBackBuffer(System.IntPtr hDC, int imageWidth, int imageHeight) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawBackBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawBackBuffer(hDC, imageWidth, imageHeight);
        }
        
        public virtual bool LoadTilesForSnapshot(MapWinGIS.Extents extents, int width, string key) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadTilesForSnapshot", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.LoadTilesForSnapshot(extents, width, key)));
            return returnValue;
        }
        
        public virtual string SerializeLayer(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SerializeLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.SerializeLayer(layerHandle)));
            return returnValue;
        }
        
        public virtual bool DeserializeLayer(int layerHandle, string newVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DeserializeLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.DeserializeLayer(layerHandle, newVal)));
            return returnValue;
        }
        
        public virtual bool SaveMapState(string filename, bool relativePaths, bool overwrite) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveMapState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SaveMapState(filename, relativePaths, overwrite)));
            return returnValue;
        }
        
        public virtual bool LoadMapState(string filename, object callback) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadMapState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.LoadMapState(filename, callback)));
            return returnValue;
        }
        
        public virtual bool SaveLayerOptions(int layerHandle, string optionsName, bool overwrite, string description) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveLayerOptions", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SaveLayerOptions(layerHandle, optionsName, overwrite, description)));
            return returnValue;
        }
        
        public virtual bool LoadLayerOptions(int layerHandle, string optionsName, ref string description) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadLayerOptions", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.LoadLayerOptions(layerHandle, optionsName, ref description)));
            return returnValue;
        }
        
        public virtual string get_LayerDescription(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerDescription", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_LayerDescription(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_LayerDescription(int layerHandle, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerDescription", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerDescription(layerHandle, param0);
        }
        
        public virtual bool DeserializeMapState(string state, bool loadLayers, string basePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DeserializeMapState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.DeserializeMapState(state, loadLayers, basePath)));
            return returnValue;
        }
        
        public virtual string SerializeMapState(bool relativePaths, string basePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SerializeMapState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.SerializeMapState(relativePaths, basePath)));
            return returnValue;
        }
        
        public virtual bool RemoveLayerOptions(int layerHandle, string optionsName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveLayerOptions", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.RemoveLayerOptions(layerHandle, optionsName)));
            return returnValue;
        }
        
        public virtual bool get_LayerSkipOnSaving(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerSkipOnSaving", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_LayerSkipOnSaving(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_LayerSkipOnSaving(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerSkipOnSaving", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerSkipOnSaving(layerHandle, param0);
        }
        
        public virtual void ShowToolTip(string text, int milliseconds) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowToolTip", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ShowToolTip(text, milliseconds);
        }
        
        public virtual void Resize(int width, int height) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Resize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Resize(width, height);
        }
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual void RemoveAllLayers() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveAllLayers", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RemoveAllLayers();
        }
        
        public virtual bool MoveLayerUp(int initialPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveLayerUp", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.MoveLayerUp(initialPosition)));
            return returnValue;
        }
        
        public virtual bool MoveLayerDown(int initialPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveLayerDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.MoveLayerDown(initialPosition)));
            return returnValue;
        }
        
        public virtual bool MoveLayer(int initialPosition, int targetPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.MoveLayer(initialPosition, targetPosition)));
            return returnValue;
        }
        
        public virtual bool MoveLayerTop(int initialPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveLayerTop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.MoveLayerTop(initialPosition)));
            return returnValue;
        }
        
        public virtual bool MoveLayerBottom(int initialPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveLayerBottom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.MoveLayerBottom(initialPosition)));
            return returnValue;
        }
        
        public virtual int get_LayerHandle(int layerPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_LayerHandle(layerPosition)));
            return returnValue;
        }
        
        public virtual int AddLayerFromFilename(string filename, MapWinGIS.tkFileOpenStrategy openStrategy, bool visible) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddLayerFromFilename", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddLayerFromFilename(filename, openStrategy, visible)));
            return returnValue;
        }
        
        public virtual int AddLayerFromDatabase(string connectionString, string layerNameOrQuery, bool visible) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddLayerFromDatabase", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddLayerFromDatabase(connectionString, layerNameOrQuery, visible)));
            return returnValue;
        }
        
        public virtual void ZoomToMaxExtents() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToMaxExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomToMaxExtents();
        }
        
        public virtual void ZoomToLayer(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomToLayer(layerHandle);
        }
        
        public virtual void ZoomToShape(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToShape", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomToShape(layerHandle, shape);
        }
        
        public virtual void ZoomIn(double percent) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomIn", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomIn(percent);
        }
        
        public virtual void ZoomOut(double percent) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomOut", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomOut(percent);
        }
        
        public virtual int ZoomToPrev() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToPrev", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ZoomToPrev()));
            return returnValue;
        }
        
        public virtual int ZoomToNext() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToNext", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ZoomToNext()));
            return returnValue;
        }
        
        public virtual void ClearExtentHistory() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearExtentHistory", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearExtentHistory();
        }
        
        public virtual bool ZoomToSelected(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToSelected", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.ZoomToSelected(layerHandle)));
            return returnValue;
        }
        
        public virtual bool ZoomToWorld() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToWorld", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.ZoomToWorld()));
            return returnValue;
        }
        
        public virtual bool SetGeographicExtents(MapWinGIS.Extents pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetGeographicExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetGeographicExtents(pVal)));
            return returnValue;
        }
        
        public virtual void ZoomToMaxVisibleExtents() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToMaxVisibleExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomToMaxVisibleExtents();
        }
        
        public virtual bool ZoomToTileLevel(int zoom) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToTileLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.ZoomToTileLevel(zoom)));
            return returnValue;
        }
        
        public virtual bool SetGeographicExtents2(double xLongitude, double yLatitude, double widthKilometers) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetGeographicExtents2", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetGeographicExtents2(xLongitude, yLatitude, widthKilometers)));
            return returnValue;
        }
        
        public virtual MapWinGIS.Extents GetKnownExtents(MapWinGIS.tkKnownExtents extents) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetKnownExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Extents returnValue = ((MapWinGIS.Extents)(this.ocx.GetKnownExtents(extents)));
            return returnValue;
        }
        
        public virtual bool get_LayerVisible(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_LayerVisible(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_LayerVisible(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerVisible(layerHandle, param0);
        }
        
        public virtual string get_LayerKey(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_LayerKey(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_LayerKey(int layerHandle, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerKey(layerHandle, param0);
        }
        
        public virtual int get_LayerPosition(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_LayerPosition(layerHandle)));
            return returnValue;
        }
        
        public virtual string get_LayerName(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_LayerName(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_LayerName(int layerHandle, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerName(layerHandle, param0);
        }
        
        public virtual void ReSourceLayer(int layerHandle, string newSrcPath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReSourceLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ReSourceLayer(layerHandle, newSrcPath);
        }
        
        public virtual string get_LayerFilename(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerFilename", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_LayerFilename(layerHandle)));
            return returnValue;
        }
        
        public virtual double get_LayerMaxVisibleScale(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerMaxVisibleScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.get_LayerMaxVisibleScale(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_LayerMaxVisibleScale(int layerHandle, double param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerMaxVisibleScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerMaxVisibleScale(layerHandle, param0);
        }
        
        public virtual double get_LayerMinVisibleScale(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerMinVisibleScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.get_LayerMinVisibleScale(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_LayerMinVisibleScale(int layerHandle, double param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerMinVisibleScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerMinVisibleScale(layerHandle, param0);
        }
        
        public virtual bool get_LayerDynamicVisibility(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerDynamicVisibility", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_LayerDynamicVisibility(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_LayerDynamicVisibility(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerDynamicVisibility", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerDynamicVisibility(layerHandle, param0);
        }
        
        public virtual int get_LayerMaxVisibleZoom(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerMaxVisibleZoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_LayerMaxVisibleZoom(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_LayerMaxVisibleZoom(int layerHandle, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerMaxVisibleZoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerMaxVisibleZoom(layerHandle, param0);
        }
        
        public virtual int get_LayerMinVisibleZoom(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerMinVisibleZoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_LayerMinVisibleZoom(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_LayerMinVisibleZoom(int layerHandle, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerMinVisibleZoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerMinVisibleZoom(layerHandle, param0);
        }
        
        public virtual MapWinGIS.Labels get_LayerLabels(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Labels returnValue = ((MapWinGIS.Labels)(this.ocx.get_LayerLabels(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_LayerLabels(int layerHandle, MapWinGIS.Labels param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerLabels(layerHandle, param0);
        }
        
        public virtual MapWinGIS.Shapefile get_Shapefile(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_Shapefile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Shapefile returnValue = ((MapWinGIS.Shapefile)(this.ocx.get_Shapefile(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_Shapefile(int layerHandle, MapWinGIS.Shapefile param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_Shapefile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_Shapefile(layerHandle, param0);
        }
        
        public virtual MapWinGIS.Image get_Image(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_Image", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Image returnValue = ((MapWinGIS.Image)(this.ocx.get_Image(layerHandle)));
            return returnValue;
        }
        
        public virtual void set_Image(int layerHandle, MapWinGIS.Image param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_Image", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_Image(layerHandle, param0);
        }
        
        public virtual object get_GetObject(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_GetObject", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.get_GetObject(layerHandle)));
            return returnValue;
        }
        
        public virtual bool get_LayerVisibleAtCurrentScale(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerVisibleAtCurrentScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_LayerVisibleAtCurrentScale(layerHandle)));
            return returnValue;
        }
        
        public virtual MapWinGIS.OgrLayer get_OgrLayer(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_OgrLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.OgrLayer returnValue = ((MapWinGIS.OgrLayer)(this.ocx.get_OgrLayer(layerHandle)));
            return returnValue;
        }
        
        public virtual MapWinGIS.WmsLayer get_WmsLayer(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_WmsLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.WmsLayer returnValue = ((MapWinGIS.WmsLayer)(this.ocx.get_WmsLayer(layerHandle)));
            return returnValue;
        }
        
        public virtual object GetColorScheme(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetColorScheme", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetColorScheme(layerHandle)));
            return returnValue;
        }
        
        public virtual bool SetImageLayerColorScheme(int layerHandle, object colorScheme) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetImageLayerColorScheme", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetImageLayerColorScheme(layerHandle, colorScheme)));
            return returnValue;
        }
        
        public virtual MapWinGIS.Extents get_layerExtents(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_layerExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Extents returnValue = ((MapWinGIS.Extents)(this.ocx.get_layerExtents(layerHandle)));
            return returnValue;
        }
        
        public virtual void ClearDrawing(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearDrawing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearDrawing(drawHandle);
        }
        
        public virtual void ClearDrawings() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearDrawings", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearDrawings();
        }
        
        public virtual int NewDrawing(MapWinGIS.tkDrawReferenceList projection) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NewDrawing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.NewDrawing(projection)));
            return returnValue;
        }
        
        public virtual void DrawPoint(double x, double y, int pixelSize, uint color) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawPoint(x, y, pixelSize, color);
        }
        
        public virtual void DrawLine(double x1, double y1, double x2, double y2, int pixelWidth, uint color) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawLine", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawLine(x1, y1, x2, y2, pixelWidth, color);
        }
        
        public virtual void DrawCircle(double x, double y, double pixelRadius, uint color, bool fill) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawCircle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawCircle(x, y, pixelRadius, color, fill);
        }
        
        public virtual void DrawPolygon(ref object xPoints, ref object yPoints, int numPoints, uint color, bool fill) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawPolygon", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawPolygon(ref xPoints, ref yPoints, numPoints, color, fill);
        }
        
        public virtual void DrawWidePolygon(ref object xPoints, ref object yPoints, int numPoints, uint color, bool fill, short width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawWidePolygon", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawWidePolygon(ref xPoints, ref yPoints, numPoints, color, fill, width);
        }
        
        public virtual void DrawWideCircle(double x, double y, double pixelRadius, uint color, bool fill, short width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawWideCircle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawWideCircle(x, y, pixelRadius, color, fill, width);
        }
        
        public virtual void DrawLineEx(int layerHandle, double x1, double y1, double x2, double y2, int pixelWidth, uint color) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawLineEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawLineEx(layerHandle, x1, y1, x2, y2, pixelWidth, color);
        }
        
        public virtual void DrawPointEx(int layerHandle, double x, double y, int pixelSize, uint color) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawPointEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawPointEx(layerHandle, x, y, pixelSize, color);
        }
        
        public virtual void DrawCircleEx(int layerHandle, double x, double y, double pixelRadius, uint color, bool fill) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawCircleEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawCircleEx(layerHandle, x, y, pixelRadius, color, fill);
        }
        
        public virtual void DrawPolygonEx(int layerHandle, ref object xPoints, ref object yPoints, int numPoints, uint color, bool fill) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawPolygonEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawPolygonEx(layerHandle, ref xPoints, ref yPoints, numPoints, color, fill);
        }
        
        public virtual void DrawWideCircleEx(int layerHandle, double x, double y, double radius, uint color, bool fill, short outlineWidth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawWideCircleEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawWideCircleEx(layerHandle, x, y, radius, color, fill, outlineWidth);
        }
        
        public virtual void DrawWidePolygonEx(int layerHandle, ref object xPoints, ref object yPoints, int numPoints, uint color, bool fill, short outlineWidth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawWidePolygonEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawWidePolygonEx(layerHandle, ref xPoints, ref yPoints, numPoints, color, fill, outlineWidth);
        }
        
        public virtual void SetDrawingLayerVisible(int layerHandle, bool visible) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDrawingLayerVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetDrawingLayerVisible(layerHandle, visible);
        }
        
        public virtual MapWinGIS.Labels get_DrawingLabels(int drawingLayerIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_DrawingLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Labels returnValue = ((MapWinGIS.Labels)(this.ocx.get_DrawingLabels(drawingLayerIndex)));
            return returnValue;
        }
        
        public virtual void set_DrawingLabels(int drawingLayerIndex, MapWinGIS.Labels param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_DrawingLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_DrawingLabels(drawingLayerIndex, param0);
        }
        
        public virtual void Redraw() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Redraw", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Redraw();
        }
        
        public virtual void LockWindow(MapWinGIS.tkLockMode lockMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockWindow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LockWindow(lockMode);
        }
        
        public virtual void Redraw2(MapWinGIS.tkRedrawType redrawType) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Redraw2", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Redraw2(redrawType);
        }
        
        public virtual void Redraw3(MapWinGIS.tkRedrawType redrawType, bool reloadTiles) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Redraw3", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Redraw3(redrawType, reloadTiles);
        }
        
        public virtual void ProjToPixel(double projX, double projY, ref double pixelX, ref double pixelY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ProjToPixel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ProjToPixel(projX, projY, ref pixelX, ref pixelY);
        }
        
        public virtual void PixelToProj(double pixelX, double pixelY, ref double projX, ref double projY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PixelToProj", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PixelToProj(pixelX, pixelY, ref projX, ref projY);
        }
        
        public virtual bool ProjToDegrees(double projX, double projY, ref double degreesLngX, ref double degreesLatY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ProjToDegrees", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.ProjToDegrees(projX, projY, ref degreesLngX, ref degreesLatY)));
            return returnValue;
        }
        
        public virtual bool DegreesToProj(double degreesLngX, double degreesLatY, ref double projX, ref double projY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DegreesToProj", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.DegreesToProj(degreesLngX, degreesLatY, ref projX, ref projY)));
            return returnValue;
        }
        
        public virtual bool PixelToDegrees(double pixelX, double pixelY, ref double degreesLngX, ref double degreesLatY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PixelToDegrees", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.PixelToDegrees(pixelX, pixelY, ref degreesLngX, ref degreesLatY)));
            return returnValue;
        }
        
        public virtual bool DegreesToPixel(double degreesLngX, double degreesLatY, ref double pixelX, ref double pixelY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DegreesToPixel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.DegreesToPixel(degreesLngX, degreesLatY, ref pixelX, ref pixelY)));
            return returnValue;
        }
        
        public virtual double GeodesicDistance(double projX1, double projY1, double projX2, double projY2) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GeodesicDistance", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GeodesicDistance(projX1, projY1, projX2, projY2)));
            return returnValue;
        }
        
        public virtual double GeodesicLength(MapWinGIS.Shape polyline) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GeodesicLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GeodesicLength(polyline)));
            return returnValue;
        }
        
        public virtual double GeodesicArea(MapWinGIS.Shape polygon) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GeodesicArea", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GeodesicArea(polygon)));
            return returnValue;
        }
        
        public virtual int AddLayer(object @object, bool visible) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddLayer(@object, visible)));
            return returnValue;
        }
        
        public virtual void RemoveLayer(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RemoveLayer(layerHandle);
        }
        
        public virtual void RemoveLayerWithoutClosing(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveLayerWithoutClosing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RemoveLayerWithoutClosing(layerHandle);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxMapEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MapWinGIS._DMapEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MapWinGIS._DMap)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, _DMapEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, _DMapEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, _DMapEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnFileDropped(object sender, _DMapEvents_FileDroppedEvent e) {
            if ((this.FileDropped != null)) {
                this.FileDropped(sender, e);
            }
        }
        
        internal void RaiseOnSelectBoxFinal(object sender, _DMapEvents_SelectBoxFinalEvent e) {
            if ((this.SelectBoxFinal != null)) {
                this.SelectBoxFinal(sender, e);
            }
        }
        
        internal void RaiseOnSelectBoxDrag(object sender, _DMapEvents_SelectBoxDragEvent e) {
            if ((this.SelectBoxDrag != null)) {
                this.SelectBoxDrag(sender, e);
            }
        }
        
        internal void RaiseOnExtentsChanged(object sender, System.EventArgs e) {
            if ((this.ExtentsChanged != null)) {
                this.ExtentsChanged(sender, e);
            }
        }
        
        internal void RaiseOnMapState(object sender, _DMapEvents_MapStateEvent e) {
            if ((this.MapState != null)) {
                this.MapState(sender, e);
            }
        }
        
        internal void RaiseOnOnDrawBackBuffer(object sender, _DMapEvents_OnDrawBackBufferEvent e) {
            if ((this.OnDrawBackBuffer != null)) {
                this.OnDrawBackBuffer(sender, e);
            }
        }
        
        internal void RaiseOnShapeHighlighted(object sender, _DMapEvents_ShapeHighlightedEvent e) {
            if ((this.ShapeHighlighted != null)) {
                this.ShapeHighlighted(sender, e);
            }
        }
        
        internal void RaiseOnBeforeDrawing(object sender, _DMapEvents_BeforeDrawingEvent e) {
            if ((this.BeforeDrawing != null)) {
                this.BeforeDrawing(sender, e);
            }
        }
        
        internal void RaiseOnAfterDrawing(object sender, _DMapEvents_AfterDrawingEvent e) {
            if ((this.AfterDrawing != null)) {
                this.AfterDrawing(sender, e);
            }
        }
        
        internal void RaiseOnTilesLoaded(object sender, _DMapEvents_TilesLoadedEvent e) {
            if ((this.TilesLoaded != null)) {
                this.TilesLoaded(sender, e);
            }
        }
        
        internal void RaiseOnMeasuringChanged(object sender, _DMapEvents_MeasuringChangedEvent e) {
            if ((this.MeasuringChanged != null)) {
                this.MeasuringChanged(sender, e);
            }
        }
        
        internal void RaiseOnBeforeShapeEdit(object sender, _DMapEvents_BeforeShapeEditEvent e) {
            if ((this.BeforeShapeEdit != null)) {
                this.BeforeShapeEdit(sender, e);
            }
        }
        
        internal void RaiseOnValidateShape(object sender, _DMapEvents_ValidateShapeEvent e) {
            if ((this.ValidateShape != null)) {
                this.ValidateShape(sender, e);
            }
        }
        
        internal void RaiseOnAfterShapeEdit(object sender, _DMapEvents_AfterShapeEditEvent e) {
            if ((this.AfterShapeEdit != null)) {
                this.AfterShapeEdit(sender, e);
            }
        }
        
        internal void RaiseOnChooseLayer(object sender, _DMapEvents_ChooseLayerEvent e) {
            if ((this.ChooseLayer != null)) {
                this.ChooseLayer(sender, e);
            }
        }
        
        internal void RaiseOnShapeValidationFailed(object sender, _DMapEvents_ShapeValidationFailedEvent e) {
            if ((this.ShapeValidationFailed != null)) {
                this.ShapeValidationFailed(sender, e);
            }
        }
        
        internal void RaiseOnBeforeDeleteShape(object sender, _DMapEvents_BeforeDeleteShapeEvent e) {
            if ((this.BeforeDeleteShape != null)) {
                this.BeforeDeleteShape(sender, e);
            }
        }
        
        internal void RaiseOnProjectionChanged(object sender, System.EventArgs e) {
            if ((this.ProjectionChanged != null)) {
                this.ProjectionChanged(sender, e);
            }
        }
        
        internal void RaiseOnUndoListChanged(object sender, System.EventArgs e) {
            if ((this.UndoListChanged != null)) {
                this.UndoListChanged(sender, e);
            }
        }
        
        internal void RaiseOnSelectionChanged(object sender, _DMapEvents_SelectionChangedEvent e) {
            if ((this.SelectionChanged != null)) {
                this.SelectionChanged(sender, e);
            }
        }
        
        internal void RaiseOnShapeIdentified(object sender, _DMapEvents_ShapeIdentifiedEvent e) {
            if ((this.ShapeIdentified != null)) {
                this.ShapeIdentified(sender, e);
            }
        }
        
        internal void RaiseOnLayerProjectionIsEmpty(object sender, _DMapEvents_LayerProjectionIsEmptyEvent e) {
            if ((this.LayerProjectionIsEmpty != null)) {
                this.LayerProjectionIsEmpty(sender, e);
            }
        }
        
        internal void RaiseOnProjectionMismatch(object sender, _DMapEvents_ProjectionMismatchEvent e) {
            if ((this.ProjectionMismatch != null)) {
                this.ProjectionMismatch(sender, e);
            }
        }
        
        internal void RaiseOnLayerReprojected(object sender, _DMapEvents_LayerReprojectedEvent e) {
            if ((this.LayerReprojected != null)) {
                this.LayerReprojected(sender, e);
            }
        }
        
        internal void RaiseOnLayerAdded(object sender, _DMapEvents_LayerAddedEvent e) {
            if ((this.LayerAdded != null)) {
                this.LayerAdded(sender, e);
            }
        }
        
        internal void RaiseOnLayerRemoved(object sender, _DMapEvents_LayerRemovedEvent e) {
            if ((this.LayerRemoved != null)) {
                this.LayerRemoved(sender, e);
            }
        }
        
        internal void RaiseOnBackgroundLoadingStarted(object sender, _DMapEvents_BackgroundLoadingStartedEvent e) {
            if ((this.BackgroundLoadingStarted != null)) {
                this.BackgroundLoadingStarted(sender, e);
            }
        }
        
        internal void RaiseOnBackgroundLoadingFinished(object sender, _DMapEvents_BackgroundLoadingFinishedEvent e) {
            if ((this.BackgroundLoadingFinished != null)) {
                this.BackgroundLoadingFinished(sender, e);
            }
        }
        
        internal void RaiseOnGridOpened(object sender, _DMapEvents_GridOpenedEvent e) {
            if ((this.GridOpened != null)) {
                this.GridOpened(sender, e);
            }
        }
        
        internal void RaiseOnShapesIdentified(object sender, _DMapEvents_ShapesIdentifiedEvent e) {
            if ((this.ShapesIdentified != null)) {
                this.ShapesIdentified(sender, e);
            }
        }
        
        internal void RaiseOnOnDrawBackBuffer2(object sender, _DMapEvents_OnDrawBackBuffer2Event e) {
            if ((this.OnDrawBackBuffer2 != null)) {
                this.OnDrawBackBuffer2(sender, e);
            }
        }
    }
    
    public delegate void _DMapEvents_MouseDownEventHandler(object sender, _DMapEvents_MouseDownEvent e);
    
    public class _DMapEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DMapEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DMapEvents_MouseUpEventHandler(object sender, _DMapEvents_MouseUpEvent e);
    
    public class _DMapEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DMapEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DMapEvents_MouseMoveEventHandler(object sender, _DMapEvents_MouseMoveEvent e);
    
    public class _DMapEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DMapEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DMapEvents_FileDroppedEventHandler(object sender, _DMapEvents_FileDroppedEvent e);
    
    public class _DMapEvents_FileDroppedEvent {
        
        public string filename;
        
        public _DMapEvents_FileDroppedEvent(string filename) {
            this.filename = filename;
        }
    }
    
    public delegate void _DMapEvents_SelectBoxFinalEventHandler(object sender, _DMapEvents_SelectBoxFinalEvent e);
    
    public class _DMapEvents_SelectBoxFinalEvent {
        
        public int left;
        
        public int right;
        
        public int bottom;
        
        public int top;
        
        public _DMapEvents_SelectBoxFinalEvent(int left, int right, int bottom, int top) {
            this.left = left;
            this.right = right;
            this.bottom = bottom;
            this.top = top;
        }
    }
    
    public delegate void _DMapEvents_SelectBoxDragEventHandler(object sender, _DMapEvents_SelectBoxDragEvent e);
    
    public class _DMapEvents_SelectBoxDragEvent {
        
        public int left;
        
        public int right;
        
        public int bottom;
        
        public int top;
        
        public _DMapEvents_SelectBoxDragEvent(int left, int right, int bottom, int top) {
            this.left = left;
            this.right = right;
            this.bottom = bottom;
            this.top = top;
        }
    }
    
    public delegate void _DMapEvents_MapStateEventHandler(object sender, _DMapEvents_MapStateEvent e);
    
    public class _DMapEvents_MapStateEvent {
        
        public int layerHandle;
        
        public _DMapEvents_MapStateEvent(int layerHandle) {
            this.layerHandle = layerHandle;
        }
    }
    
    public delegate void _DMapEvents_OnDrawBackBufferEventHandler(object sender, _DMapEvents_OnDrawBackBufferEvent e);
    
    public class _DMapEvents_OnDrawBackBufferEvent {
        
        public int backBuffer;
        
        public _DMapEvents_OnDrawBackBufferEvent(int backBuffer) {
            this.backBuffer = backBuffer;
        }
    }
    
    public delegate void _DMapEvents_ShapeHighlightedEventHandler(object sender, _DMapEvents_ShapeHighlightedEvent e);
    
    public class _DMapEvents_ShapeHighlightedEvent {
        
        public int layerHandle;
        
        public int shapeIndex;
        
        public _DMapEvents_ShapeHighlightedEvent(int layerHandle, int shapeIndex) {
            this.layerHandle = layerHandle;
            this.shapeIndex = shapeIndex;
        }
    }
    
    public delegate void _DMapEvents_BeforeDrawingEventHandler(object sender, _DMapEvents_BeforeDrawingEvent e);
    
    public class _DMapEvents_BeforeDrawingEvent {
        
        public int hDC;
        
        public int xMin;
        
        public int xMax;
        
        public int yMin;
        
        public int yMax;
        
        public MapWinGIS.tkMwBoolean handled;
        
        public _DMapEvents_BeforeDrawingEvent(int hDC, int xMin, int xMax, int yMin, int yMax, MapWinGIS.tkMwBoolean handled) {
            this.hDC = hDC;
            this.xMin = xMin;
            this.xMax = xMax;
            this.yMin = yMin;
            this.yMax = yMax;
            this.handled = handled;
        }
    }
    
    public delegate void _DMapEvents_AfterDrawingEventHandler(object sender, _DMapEvents_AfterDrawingEvent e);
    
    public class _DMapEvents_AfterDrawingEvent {
        
        public int hDC;
        
        public int xMin;
        
        public int xMax;
        
        public int yMin;
        
        public int yMax;
        
        public MapWinGIS.tkMwBoolean handled;
        
        public _DMapEvents_AfterDrawingEvent(int hDC, int xMin, int xMax, int yMin, int yMax, MapWinGIS.tkMwBoolean handled) {
            this.hDC = hDC;
            this.xMin = xMin;
            this.xMax = xMax;
            this.yMin = yMin;
            this.yMax = yMax;
            this.handled = handled;
        }
    }
    
    public delegate void _DMapEvents_TilesLoadedEventHandler(object sender, _DMapEvents_TilesLoadedEvent e);
    
    public class _DMapEvents_TilesLoadedEvent {
        
        public bool snapShot;
        
        public string key;
        
        public bool fromCache;
        
        public _DMapEvents_TilesLoadedEvent(bool snapShot, string key, bool fromCache) {
            this.snapShot = snapShot;
            this.key = key;
            this.fromCache = fromCache;
        }
    }
    
    public delegate void _DMapEvents_MeasuringChangedEventHandler(object sender, _DMapEvents_MeasuringChangedEvent e);
    
    public class _DMapEvents_MeasuringChangedEvent {
        
        public MapWinGIS.tkMeasuringAction action;
        
        public _DMapEvents_MeasuringChangedEvent(MapWinGIS.tkMeasuringAction action) {
            this.action = action;
        }
    }
    
    public delegate void _DMapEvents_BeforeShapeEditEventHandler(object sender, _DMapEvents_BeforeShapeEditEvent e);
    
    public class _DMapEvents_BeforeShapeEditEvent {
        
        public int layerHandle;
        
        public int shapeIndex;
        
        public MapWinGIS.tkMwBoolean cancel;
        
        public _DMapEvents_BeforeShapeEditEvent(int layerHandle, int shapeIndex, MapWinGIS.tkMwBoolean cancel) {
            this.layerHandle = layerHandle;
            this.shapeIndex = shapeIndex;
            this.cancel = cancel;
        }
    }
    
    public delegate void _DMapEvents_ValidateShapeEventHandler(object sender, _DMapEvents_ValidateShapeEvent e);
    
    public class _DMapEvents_ValidateShapeEvent {
        
        public int layerHandle;
        
        public MapWinGIS.Shape shape;
        
        public MapWinGIS.tkMwBoolean cancel;
        
        public _DMapEvents_ValidateShapeEvent(int layerHandle, MapWinGIS.Shape shape, MapWinGIS.tkMwBoolean cancel) {
            this.layerHandle = layerHandle;
            this.shape = shape;
            this.cancel = cancel;
        }
    }
    
    public delegate void _DMapEvents_AfterShapeEditEventHandler(object sender, _DMapEvents_AfterShapeEditEvent e);
    
    public class _DMapEvents_AfterShapeEditEvent {
        
        public MapWinGIS.tkUndoOperation operation;
        
        public int layerHandle;
        
        public int shapeIndex;
        
        public _DMapEvents_AfterShapeEditEvent(MapWinGIS.tkUndoOperation operation, int layerHandle, int shapeIndex) {
            this.operation = operation;
            this.layerHandle = layerHandle;
            this.shapeIndex = shapeIndex;
        }
    }
    
    public delegate void _DMapEvents_ChooseLayerEventHandler(object sender, _DMapEvents_ChooseLayerEvent e);
    
    public class _DMapEvents_ChooseLayerEvent {
        
        public double xProj;
        
        public double yProj;
        
        public int layerHandle;
        
        public _DMapEvents_ChooseLayerEvent(double xProj, double yProj, int layerHandle) {
            this.xProj = xProj;
            this.yProj = yProj;
            this.layerHandle = layerHandle;
        }
    }
    
    public delegate void _DMapEvents_ShapeValidationFailedEventHandler(object sender, _DMapEvents_ShapeValidationFailedEvent e);
    
    public class _DMapEvents_ShapeValidationFailedEvent {
        
        public string errorMessage;
        
        public _DMapEvents_ShapeValidationFailedEvent(string errorMessage) {
            this.errorMessage = errorMessage;
        }
    }
    
    public delegate void _DMapEvents_BeforeDeleteShapeEventHandler(object sender, _DMapEvents_BeforeDeleteShapeEvent e);
    
    public class _DMapEvents_BeforeDeleteShapeEvent {
        
        public MapWinGIS.tkDeleteTarget target;
        
        public MapWinGIS.tkMwBoolean cancel;
        
        public _DMapEvents_BeforeDeleteShapeEvent(MapWinGIS.tkDeleteTarget target, MapWinGIS.tkMwBoolean cancel) {
            this.target = target;
            this.cancel = cancel;
        }
    }
    
    public delegate void _DMapEvents_SelectionChangedEventHandler(object sender, _DMapEvents_SelectionChangedEvent e);
    
    public class _DMapEvents_SelectionChangedEvent {
        
        public int layerHandle;
        
        public _DMapEvents_SelectionChangedEvent(int layerHandle) {
            this.layerHandle = layerHandle;
        }
    }
    
    public delegate void _DMapEvents_ShapeIdentifiedEventHandler(object sender, _DMapEvents_ShapeIdentifiedEvent e);
    
    public class _DMapEvents_ShapeIdentifiedEvent {
        
        public int layerHandle;
        
        public int shapeIndex;
        
        public double pointX;
        
        public double pointY;
        
        public _DMapEvents_ShapeIdentifiedEvent(int layerHandle, int shapeIndex, double pointX, double pointY) {
            this.layerHandle = layerHandle;
            this.shapeIndex = shapeIndex;
            this.pointX = pointX;
            this.pointY = pointY;
        }
    }
    
    public delegate void _DMapEvents_LayerProjectionIsEmptyEventHandler(object sender, _DMapEvents_LayerProjectionIsEmptyEvent e);
    
    public class _DMapEvents_LayerProjectionIsEmptyEvent {
        
        public int layerHandle;
        
        public MapWinGIS.tkMwBoolean cancelAdding;
        
        public _DMapEvents_LayerProjectionIsEmptyEvent(int layerHandle, MapWinGIS.tkMwBoolean cancelAdding) {
            this.layerHandle = layerHandle;
            this.cancelAdding = cancelAdding;
        }
    }
    
    public delegate void _DMapEvents_ProjectionMismatchEventHandler(object sender, _DMapEvents_ProjectionMismatchEvent e);
    
    public class _DMapEvents_ProjectionMismatchEvent {
        
        public int layerHandle;
        
        public MapWinGIS.tkMwBoolean cancelAdding;
        
        public MapWinGIS.tkMwBoolean reproject;
        
        public _DMapEvents_ProjectionMismatchEvent(int layerHandle, MapWinGIS.tkMwBoolean cancelAdding, MapWinGIS.tkMwBoolean reproject) {
            this.layerHandle = layerHandle;
            this.cancelAdding = cancelAdding;
            this.reproject = reproject;
        }
    }
    
    public delegate void _DMapEvents_LayerReprojectedEventHandler(object sender, _DMapEvents_LayerReprojectedEvent e);
    
    public class _DMapEvents_LayerReprojectedEvent {
        
        public int layerHandle;
        
        public bool success;
        
        public _DMapEvents_LayerReprojectedEvent(int layerHandle, bool success) {
            this.layerHandle = layerHandle;
            this.success = success;
        }
    }
    
    public delegate void _DMapEvents_LayerAddedEventHandler(object sender, _DMapEvents_LayerAddedEvent e);
    
    public class _DMapEvents_LayerAddedEvent {
        
        public int layerHandle;
        
        public _DMapEvents_LayerAddedEvent(int layerHandle) {
            this.layerHandle = layerHandle;
        }
    }
    
    public delegate void _DMapEvents_LayerRemovedEventHandler(object sender, _DMapEvents_LayerRemovedEvent e);
    
    public class _DMapEvents_LayerRemovedEvent {
        
        public int layerHandle;
        
        public bool fromRemoveAllLayers;
        
        public _DMapEvents_LayerRemovedEvent(int layerHandle, bool fromRemoveAllLayers) {
            this.layerHandle = layerHandle;
            this.fromRemoveAllLayers = fromRemoveAllLayers;
        }
    }
    
    public delegate void _DMapEvents_BackgroundLoadingStartedEventHandler(object sender, _DMapEvents_BackgroundLoadingStartedEvent e);
    
    public class _DMapEvents_BackgroundLoadingStartedEvent {
        
        public int taskId;
        
        public int layerHandle;
        
        public _DMapEvents_BackgroundLoadingStartedEvent(int taskId, int layerHandle) {
            this.taskId = taskId;
            this.layerHandle = layerHandle;
        }
    }
    
    public delegate void _DMapEvents_BackgroundLoadingFinishedEventHandler(object sender, _DMapEvents_BackgroundLoadingFinishedEvent e);
    
    public class _DMapEvents_BackgroundLoadingFinishedEvent {
        
        public int taskId;
        
        public int layerHandle;
        
        public int numFeatures;
        
        public int numLoaded;
        
        public _DMapEvents_BackgroundLoadingFinishedEvent(int taskId, int layerHandle, int numFeatures, int numLoaded) {
            this.taskId = taskId;
            this.layerHandle = layerHandle;
            this.numFeatures = numFeatures;
            this.numLoaded = numLoaded;
        }
    }
    
    public delegate void _DMapEvents_GridOpenedEventHandler(object sender, _DMapEvents_GridOpenedEvent e);
    
    public class _DMapEvents_GridOpenedEvent {
        
        public int layerHandle;
        
        public string gridFilename;
        
        public int bandIndex;
        
        public bool isUsingProxy;
        
        public _DMapEvents_GridOpenedEvent(int layerHandle, string gridFilename, int bandIndex, bool isUsingProxy) {
            this.layerHandle = layerHandle;
            this.gridFilename = gridFilename;
            this.bandIndex = bandIndex;
            this.isUsingProxy = isUsingProxy;
        }
    }
    
    public delegate void _DMapEvents_ShapesIdentifiedEventHandler(object sender, _DMapEvents_ShapesIdentifiedEvent e);
    
    public class _DMapEvents_ShapesIdentifiedEvent {
        
        public MapWinGIS.SelectionList selectedShapes;
        
        public double projX;
        
        public double projY;
        
        public _DMapEvents_ShapesIdentifiedEvent(MapWinGIS.SelectionList selectedShapes, double projX, double projY) {
            this.selectedShapes = selectedShapes;
            this.projX = projX;
            this.projY = projY;
        }
    }
    
    public delegate void _DMapEvents_OnDrawBackBuffer2EventHandler(object sender, _DMapEvents_OnDrawBackBuffer2Event e);
    
    public class _DMapEvents_OnDrawBackBuffer2Event {
        
        public int height;
        
        public int width;
        
        public int stride;
        
        public int pixelFormat;
        
        public int scan0;
        
        public _DMapEvents_OnDrawBackBuffer2Event(int height, int width, int stride, int pixelFormat, int scan0) {
            this.height = height;
            this.width = width;
            this.stride = stride;
            this.pixelFormat = pixelFormat;
            this.scan0 = scan0;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxMapEventMulticaster : MapWinGIS._DMapEvents {
        
        private AxMap parent;
        
        public AxMapEventMulticaster(AxMap parent) {
            this.parent = parent;
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            _DMapEvents_MouseDownEvent mousedownEvent = new _DMapEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            _DMapEvents_MouseUpEvent mouseupEvent = new _DMapEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            _DMapEvents_MouseMoveEvent mousemoveEvent = new _DMapEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void FileDropped(string filename) {
            _DMapEvents_FileDroppedEvent filedroppedEvent = new _DMapEvents_FileDroppedEvent(filename);
            this.parent.RaiseOnFileDropped(this.parent, filedroppedEvent);
        }
        
        public virtual void SelectBoxFinal(int left, int right, int bottom, int top) {
            _DMapEvents_SelectBoxFinalEvent selectboxfinalEvent = new _DMapEvents_SelectBoxFinalEvent(left, right, bottom, top);
            this.parent.RaiseOnSelectBoxFinal(this.parent, selectboxfinalEvent);
        }
        
        public virtual void SelectBoxDrag(int left, int right, int bottom, int top) {
            _DMapEvents_SelectBoxDragEvent selectboxdragEvent = new _DMapEvents_SelectBoxDragEvent(left, right, bottom, top);
            this.parent.RaiseOnSelectBoxDrag(this.parent, selectboxdragEvent);
        }
        
        public virtual void ExtentsChanged() {
            System.EventArgs extentschangedEvent = new System.EventArgs();
            this.parent.RaiseOnExtentsChanged(this.parent, extentschangedEvent);
        }
        
        public virtual void MapState(int layerHandle) {
            _DMapEvents_MapStateEvent mapstateEvent = new _DMapEvents_MapStateEvent(layerHandle);
            this.parent.RaiseOnMapState(this.parent, mapstateEvent);
        }
        
        public virtual void OnDrawBackBuffer(int backBuffer) {
            _DMapEvents_OnDrawBackBufferEvent ondrawbackbufferEvent = new _DMapEvents_OnDrawBackBufferEvent(backBuffer);
            this.parent.RaiseOnOnDrawBackBuffer(this.parent, ondrawbackbufferEvent);
        }
        
        public virtual void ShapeHighlighted(int layerHandle, int shapeIndex) {
            _DMapEvents_ShapeHighlightedEvent shapehighlightedEvent = new _DMapEvents_ShapeHighlightedEvent(layerHandle, shapeIndex);
            this.parent.RaiseOnShapeHighlighted(this.parent, shapehighlightedEvent);
        }
        
        public virtual void BeforeDrawing(int hDC, int xMin, int xMax, int yMin, int yMax, ref MapWinGIS.tkMwBoolean handled) {
            _DMapEvents_BeforeDrawingEvent beforedrawingEvent = new _DMapEvents_BeforeDrawingEvent(hDC, xMin, xMax, yMin, yMax, handled);
            this.parent.RaiseOnBeforeDrawing(this.parent, beforedrawingEvent);
            handled = beforedrawingEvent.handled;
        }
        
        public virtual void AfterDrawing(int hDC, int xMin, int xMax, int yMin, int yMax, ref MapWinGIS.tkMwBoolean handled) {
            _DMapEvents_AfterDrawingEvent afterdrawingEvent = new _DMapEvents_AfterDrawingEvent(hDC, xMin, xMax, yMin, yMax, handled);
            this.parent.RaiseOnAfterDrawing(this.parent, afterdrawingEvent);
            handled = afterdrawingEvent.handled;
        }
        
        public virtual void TilesLoaded(bool snapShot, string key, bool fromCache) {
            _DMapEvents_TilesLoadedEvent tilesloadedEvent = new _DMapEvents_TilesLoadedEvent(snapShot, key, fromCache);
            this.parent.RaiseOnTilesLoaded(this.parent, tilesloadedEvent);
        }
        
        public virtual void MeasuringChanged(MapWinGIS.tkMeasuringAction action) {
            _DMapEvents_MeasuringChangedEvent measuringchangedEvent = new _DMapEvents_MeasuringChangedEvent(action);
            this.parent.RaiseOnMeasuringChanged(this.parent, measuringchangedEvent);
        }
        
        public virtual void BeforeShapeEdit(int layerHandle, int shapeIndex, ref MapWinGIS.tkMwBoolean cancel) {
            _DMapEvents_BeforeShapeEditEvent beforeshapeeditEvent = new _DMapEvents_BeforeShapeEditEvent(layerHandle, shapeIndex, cancel);
            this.parent.RaiseOnBeforeShapeEdit(this.parent, beforeshapeeditEvent);
            cancel = beforeshapeeditEvent.cancel;
        }
        
        public virtual void ValidateShape(int layerHandle, MapWinGIS.Shape shape, ref MapWinGIS.tkMwBoolean cancel) {
            _DMapEvents_ValidateShapeEvent validateshapeEvent = new _DMapEvents_ValidateShapeEvent(layerHandle, shape, cancel);
            this.parent.RaiseOnValidateShape(this.parent, validateshapeEvent);
            cancel = validateshapeEvent.cancel;
        }
        
        public virtual void AfterShapeEdit(MapWinGIS.tkUndoOperation operation, int layerHandle, int shapeIndex) {
            _DMapEvents_AfterShapeEditEvent aftershapeeditEvent = new _DMapEvents_AfterShapeEditEvent(operation, layerHandle, shapeIndex);
            this.parent.RaiseOnAfterShapeEdit(this.parent, aftershapeeditEvent);
        }
        
        public virtual void ChooseLayer(double xProj, double yProj, ref int layerHandle) {
            _DMapEvents_ChooseLayerEvent chooselayerEvent = new _DMapEvents_ChooseLayerEvent(xProj, yProj, layerHandle);
            this.parent.RaiseOnChooseLayer(this.parent, chooselayerEvent);
            layerHandle = chooselayerEvent.layerHandle;
        }
        
        public virtual void ShapeValidationFailed(string errorMessage) {
            _DMapEvents_ShapeValidationFailedEvent shapevalidationfailedEvent = new _DMapEvents_ShapeValidationFailedEvent(errorMessage);
            this.parent.RaiseOnShapeValidationFailed(this.parent, shapevalidationfailedEvent);
        }
        
        public virtual void BeforeDeleteShape(MapWinGIS.tkDeleteTarget target, ref MapWinGIS.tkMwBoolean cancel) {
            _DMapEvents_BeforeDeleteShapeEvent beforedeleteshapeEvent = new _DMapEvents_BeforeDeleteShapeEvent(target, cancel);
            this.parent.RaiseOnBeforeDeleteShape(this.parent, beforedeleteshapeEvent);
            cancel = beforedeleteshapeEvent.cancel;
        }
        
        public virtual void ProjectionChanged() {
            System.EventArgs projectionchangedEvent = new System.EventArgs();
            this.parent.RaiseOnProjectionChanged(this.parent, projectionchangedEvent);
        }
        
        public virtual void UndoListChanged() {
            System.EventArgs undolistchangedEvent = new System.EventArgs();
            this.parent.RaiseOnUndoListChanged(this.parent, undolistchangedEvent);
        }
        
        public virtual void SelectionChanged(int layerHandle) {
            _DMapEvents_SelectionChangedEvent selectionchangedEvent = new _DMapEvents_SelectionChangedEvent(layerHandle);
            this.parent.RaiseOnSelectionChanged(this.parent, selectionchangedEvent);
        }
        
        public virtual void ShapeIdentified(int layerHandle, int shapeIndex, double pointX, double pointY) {
            _DMapEvents_ShapeIdentifiedEvent shapeidentifiedEvent = new _DMapEvents_ShapeIdentifiedEvent(layerHandle, shapeIndex, pointX, pointY);
            this.parent.RaiseOnShapeIdentified(this.parent, shapeidentifiedEvent);
        }
        
        public virtual void LayerProjectionIsEmpty(int layerHandle, ref MapWinGIS.tkMwBoolean cancelAdding) {
            _DMapEvents_LayerProjectionIsEmptyEvent layerprojectionisemptyEvent = new _DMapEvents_LayerProjectionIsEmptyEvent(layerHandle, cancelAdding);
            this.parent.RaiseOnLayerProjectionIsEmpty(this.parent, layerprojectionisemptyEvent);
            cancelAdding = layerprojectionisemptyEvent.cancelAdding;
        }
        
        public virtual void ProjectionMismatch(int layerHandle, ref MapWinGIS.tkMwBoolean cancelAdding, ref MapWinGIS.tkMwBoolean reproject) {
            _DMapEvents_ProjectionMismatchEvent projectionmismatchEvent = new _DMapEvents_ProjectionMismatchEvent(layerHandle, cancelAdding, reproject);
            this.parent.RaiseOnProjectionMismatch(this.parent, projectionmismatchEvent);
            cancelAdding = projectionmismatchEvent.cancelAdding;
            reproject = projectionmismatchEvent.reproject;
        }
        
        public virtual void LayerReprojected(int layerHandle, bool success) {
            _DMapEvents_LayerReprojectedEvent layerreprojectedEvent = new _DMapEvents_LayerReprojectedEvent(layerHandle, success);
            this.parent.RaiseOnLayerReprojected(this.parent, layerreprojectedEvent);
        }
        
        public virtual void LayerAdded(int layerHandle) {
            _DMapEvents_LayerAddedEvent layeraddedEvent = new _DMapEvents_LayerAddedEvent(layerHandle);
            this.parent.RaiseOnLayerAdded(this.parent, layeraddedEvent);
        }
        
        public virtual void LayerRemoved(int layerHandle, bool fromRemoveAllLayers) {
            _DMapEvents_LayerRemovedEvent layerremovedEvent = new _DMapEvents_LayerRemovedEvent(layerHandle, fromRemoveAllLayers);
            this.parent.RaiseOnLayerRemoved(this.parent, layerremovedEvent);
        }
        
        public virtual void BackgroundLoadingStarted(int taskId, int layerHandle) {
            _DMapEvents_BackgroundLoadingStartedEvent backgroundloadingstartedEvent = new _DMapEvents_BackgroundLoadingStartedEvent(taskId, layerHandle);
            this.parent.RaiseOnBackgroundLoadingStarted(this.parent, backgroundloadingstartedEvent);
        }
        
        public virtual void BackgroundLoadingFinished(int taskId, int layerHandle, int numFeatures, int numLoaded) {
            _DMapEvents_BackgroundLoadingFinishedEvent backgroundloadingfinishedEvent = new _DMapEvents_BackgroundLoadingFinishedEvent(taskId, layerHandle, numFeatures, numLoaded);
            this.parent.RaiseOnBackgroundLoadingFinished(this.parent, backgroundloadingfinishedEvent);
        }
        
        public virtual void GridOpened(int layerHandle, string gridFilename, int bandIndex, bool isUsingProxy) {
            _DMapEvents_GridOpenedEvent gridopenedEvent = new _DMapEvents_GridOpenedEvent(layerHandle, gridFilename, bandIndex, isUsingProxy);
            this.parent.RaiseOnGridOpened(this.parent, gridopenedEvent);
        }
        
        public virtual void ShapesIdentified(MapWinGIS.SelectionList selectedShapes, double projX, double projY) {
            _DMapEvents_ShapesIdentifiedEvent shapesidentifiedEvent = new _DMapEvents_ShapesIdentifiedEvent(selectedShapes, projX, projY);
            this.parent.RaiseOnShapesIdentified(this.parent, shapesidentifiedEvent);
        }
        
        public virtual void OnDrawBackBuffer2(int height, int width, int stride, int pixelFormat, int scan0) {
            _DMapEvents_OnDrawBackBuffer2Event ondrawbackbuffer2Event = new _DMapEvents_OnDrawBackBuffer2Event(height, width, stride, pixelFormat, scan0);
            this.parent.RaiseOnOnDrawBackBuffer2(this.parent, ondrawbackbuffer2Event);
        }
    }
}
